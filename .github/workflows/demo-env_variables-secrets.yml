name: Demo - environment, variables and secrets
on:
  #  push:
  workflow_dispatch:
env:
  ENV_VAR: GLOBAL
  IS_TEST_ENVIRONMENT: true
jobs:
  workflow-description:
    runs-on: ubuntu-latest
    steps:
      - name: Print workflow description
        run: |
          echo ---
          echo 'Shows usage of environment variables and secrets (set in workflow and in GitHub repository)'
          echo 'Shading examples show how environment variable shade each other values (when having the same name)'
          echo '  the general rule is: the smallest scope wins, i.e. GLOBAL < JOB < STEP'
          echo '  it means that workflow-level variable will be shaded by job-level variable'
          echo '  same way, they both will be shaded by step-level variable'
          echo ---
          echo The other job shows how variables and secrets set in the Github repository work 
          echo It prints its own explanation
          echo ---
  no-shading:
    runs-on: ubuntu-latest
    steps:
      - name: Print '$ENV_VAR' shaded on JOB and STEP levels
        run: |
          echo '$ENV_VAR =' "$ENV_VAR"'
          echo $''{{env.ENV_VAR}} =' "${{env.ENV_VAR}}"
  shade-on-job:
    runs-on: ubuntu-latest
    env:
      ENV_VAR: JOB
    steps:
      - name: Print env variables
        run: |
          echo '$ENV_VAR =' "$ENV_VAR"'
          echo $''{{env.ENV_VAR}} =' "${{env.ENV_VAR}}"
  shade-on-job-and-step:
    runs-on: ubuntu-latest
    env:
      ENV_VAR: JOB
    steps:
      - name: Print '$ENV_VAR' shaded on JOB and STEP levels
        env:
          ENV_VAR: STEP
        run: |
          echo '$ENV_VAR =' "$ENV_VAR"'
          echo $''{{env.ENV_VAR}} =' "${{env.ENV_VAR}}"

  print-repo-variable-and-secret-description:
    runs-on: ubuntu-latest
    steps:
      - name: Print jobs description
        run: |
          echo ---
          echo 'We defined a variable and a secret in GitHub repository:'
          echo '  1) On repo level'
          echo '  2) In the testing environment'
          echo 'Now we shall print both variable and secret in jobs with environment set and unset'
          echo 'The values should depend on environment, and the secrets should remain secrets (printed as ***)'
          echo ---
  print-repo-variable-and-secret-general:
    runs-on: ubuntu-latest
    needs: print-repo-variable-and-secret-description
    steps:
      - name: Print env variable and secret
        run: |
          echo ---
          echo Here we DID NOT DEFINE environment so should receive repo-level values
          echo ---
          echo --- 'Print repo variable (2 ways)'
          echo '$REPO_VARIABLE =' "$REPO_VARIABLE"
          echo '${{env.REPO_VARIABLE}} =' "${{env.REPO_VARIABLE}}"
          echo ---
          echo --- 'Print repo secret (2 ways)'
          echo '$REPO_SECRET =' "$REPO_SECRET"
          echo '${{env.REPO_SECRET}} =' "${{env.REPO_SECRET}}"
          echo ---
  print-repo-variable-and-secret-testing-environment:
    runs-on: ubuntu-latest
    needs: print-repo-variable-and-secret-description
    environment: testing
    env:
      REPO_VARIABLE: ${{ vars.REPOSITORY_VARIABLE }}
      REPO_SECRET: ${{ secrets.REPOSITORY_SECRET }}
    steps:
      - name: Print env variable and secret
        run: |
          echo ---
          echo Here we DEFINED environment so should receive environment-level specific values
          echo ---
          echo --- 'Print repo variable (2 ways)'
          echo '$REPO_VARIABLE =' "$REPO_VARIABLE"
          echo '${{env.REPO_VARIABLE}} =' "${{env.REPO_VARIABLE}}"
          echo ---
          echo --- 'Print repo secret (2 ways)'
          echo '$REPO_SECRET =' "$REPO_SECRET"
          echo '${{env.REPO_SECRET}} =' "${{env.REPO_SECRET}}"
          echo ---
